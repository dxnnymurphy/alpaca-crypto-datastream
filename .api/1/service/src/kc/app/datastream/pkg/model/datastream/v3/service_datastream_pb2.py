# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: service-datastream.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2
from protoc_gen_openapiv2.options import annotations_pb2 as protoc__gen__openapiv2_dot_options_dot_annotations__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x18service-datastream.proto\x12\x0f\x64\x61tastream.grpc\x1a\x1cgoogle/api/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\"\xc4\x01\n\x05Tasks\x12\x31\n\x08metadata\x18\x01 \x01(\x0b\x32\x1f.datastream.grpc.Tasks.Metadata\x12)\n\x04spec\x18\x02 \x01(\x0b\x32\x1b.datastream.grpc.Tasks.Spec\x1a\x16\n\x08Metadata\x12\n\n\x02id\x18\x01 \x01(\t\x1a\x45\n\x04Spec\x12$\n\x05items\x18\x01 \x03(\x0b\x32\x15.datastream.grpc.Task\x12\x17\n\x0fnumber_of_items\x18\x02 \x01(\x05\"\xbc\x05\n\x04Task\x12\x30\n\x08metadata\x18\x01 \x01(\x0b\x32\x1e.datastream.grpc.Task.Metadata\x12(\n\x04spec\x18\x02 \x01(\x0b\x32\x1a.datastream.grpc.Task.Spec\x12,\n\x06status\x18\x03 \x01(\x0b\x32\x1c.datastream.grpc.Task.Status\x1a\xc3\x01\n\x08Metadata\x12\n\n\x02id\x18\x01 \x01(\t\x12\'\n\x04type\x18\x02 \x01(\x0e\x32\x19.datastream.grpc.TaskType\x12\x11\n\tnamespace\x18\x03 \x01(\t\x12\'\n\x06vendor\x18\x04 \x01(\x0e\x32\x17.datastream.grpc.Vendor\x12+\n\x08\x63urrency\x18\x05 \x01(\x0e\x32\x19.datastream.grpc.Currency\x12\x19\n\x11\x65xecutor_affinity\x18\x06 \x01(\x05\x1a\x9a\x02\n\x04Spec\x12Z\n\x1ftask_alpaca_crypto_trade_search\x18\x01 \x01(\x0b\x32,.datastream.grpc.TaskAlpacaCryptoTradeSearchH\x00\x88\x01\x01\x12g\n&task_alpaca_crypto_replay_trade_search\x18\x02 \x01(\x0b\x32\x32.datastream.grpc.TaskAlpacaCryptoReplayTradeSearchH\x01\x88\x01\x01\x42\"\n _task_alpaca_crypto_trade_searchB)\n\'_task_alpaca_crypto_replay_trade_search\x1aG\n\x06Status\x12-\n\x04type\x18\x01 \x01(\x0e\x32\x1f.datastream.grpc.TaskStatusType\x12\x0e\n\x06reason\x18\x02 \x01(\t\"\xb9\x01\n\x1bTaskAlpacaCryptoTradeSearch\x12\x15\n\x08\x63urrency\x18\x01 \x01(\tH\x00\x88\x01\x01\x12\x16\n\tstartTime\x18\x02 \x01(\tH\x01\x88\x01\x01\x12\x14\n\x07\x65ndTime\x18\x03 \x01(\tH\x02\x88\x01\x01\x12\x1b\n\x0esearchDuration\x18\x04 \x01(\x05H\x03\x88\x01\x01\x42\x0b\n\t_currencyB\x0c\n\n_startTimeB\n\n\x08_endTimeB\x11\n\x0f_searchDuration\"\xab\x01\n!TaskAlpacaCryptoReplayTradeSearch\x12\x0e\n\x06Vendor\x18\x01 \x01(\t\x12\x16\n\tstartTime\x18\x02 \x01(\tH\x00\x88\x01\x01\x12\x14\n\x07\x65ndTime\x18\x03 \x01(\tH\x01\x88\x01\x01\x12\x1b\n\x0esearchDuration\x18\x04 \x01(\tH\x02\x88\x01\x01\x42\x0c\n\n_startTimeB\n\n\x08_endTimeB\x11\n\x0f_searchDuration\"\x06\n\x04Void\"\x16\n\x05Int32\x12\r\n\x05value\x18\x01 \x01(\x05\"\x17\n\x06String\x12\r\n\x05value\x18\x01 \x01(\t*q\n\x08TaskType\x12\x14\n\x10TaskType_UNKNOWN\x10\x00\x12#\n\x1fTASK_ALPACA_CRYPTO_TRADE_SEARCH\x10\x01\x12*\n&TASK_ALPACA_CRYPTO_REPLAY_TRADE_SEARCH\x10\x02*\xe9\x01\n\x0eTaskStatusType\x12\x1a\n\x16TaskStatusType_UNKNOWN\x10\x00\x12\x14\n\x10TASK_STATUS_DONE\x10\x01\x12\x17\n\x13TASK_STATUS_CREATED\x10\x02\x12&\n\"TASK_STATUS_ERROR_INVALID_ARGUMENT\x10\x03\x12$\n TASK_STATUS_ERROR_ALREADY_EXISTS\x10\x04\x12\x1f\n\x1bTASK_STATUS_ERROR_TRANSIENT\x10\x05\x12\x1d\n\x19TASK_STATUS_ERROR_UNKNOWN\x10\x06*L\n\x08\x43urrency\x12\x14\n\x10\x43URRENCY_UNKNOWN\x10\x00\x12\x14\n\x10\x43URRENCY_ETH_USD\x10\x01\x12\x14\n\x10\x43URRENCY_BTC_USD\x10\x02*:\n\x06Vendor\x12\x12\n\x0eVENDOR_UNKNOWN\x10\x00\x12\x1c\n\x18VENDOR_ALPACA_CRYPTO_API\x10\x01\x32\xb1\x03\n\x11ServiceDataStream\x12\x63\n\nCreateTask\x12\x15.datastream.grpc.Task\x1a\x15.datastream.grpc.Task\"\'\x82\xd3\xe4\x93\x02!\"\x1c/proxy/datastream/api/1/task:\x01*\x12j\n\nDeleteTask\x12\x17.datastream.grpc.String\x1a\x15.datastream.grpc.Task\",\x82\xd3\xe4\x93\x02&*$/proxy/datastream/api/1/task/{value}\x12h\n\x08ReadTask\x12\x17.datastream.grpc.String\x1a\x15.datastream.grpc.Task\",\x82\xd3\xe4\x93\x02&\x12$/proxy/datastream/api/1/task/{value}\x12\x61\n\tListTasks\x12\x15.datastream.grpc.Void\x1a\x16.datastream.grpc.Tasks\"%\x82\xd3\xe4\x93\x02\x1f\x12\x1d/proxy/datastream/api/1/tasksB\xfd\x06Z1dxnnymurphy.io/datastream/pkg/model/datastream/v3\x92\x41\xc6\x06\x12\x89\x01\n\x0b\x44\x61ta Stream\"I\n\rDaniel Murphy\x12\x1ehttps://dxnnymurphy.github.io/\x1a\x18\x64\x61nnymurphy_7@icloud.com**\n\x03MIT\x12#https://opensource.org/licenses/MIT2\x03\x30.1*\x02\x02\x01\x32\x10\x61pplication/json:\x10\x61pplication/jsonZ\xf9\x03\n\x0f\n\tBasicAuth\x12\x02\x08\x01\n\xaa\x01\n\nApiKeyAuth\x12\x9b\x01\x08\x02\x1a\tX-API-Key \x02J(\n\x1cx-amazon-apigateway-authtype\x12\x08\x1a\x06oauth2J`\n\x1ex-amazon-apigateway-authorizer\x12>*<\n\x0f\n\x04type\x12\x07\x1a\x05token\n)\n\x1c\x61uthorizerResultTtlInSeconds\x12\t\x11\x00\x00\x00\x00\x00\x00N@\n\xb8\x02\n\x06OAuth2\x12\xad\x02\x08\x03(\x04\x32Thttps://kcde.uat.keplercheuvreux.io/proxy/v1/security/authentication/oauth/authorize:Phttps://kcde.uat.keplercheuvreux.io/proxy/v1/security/authentication/oauth/tokenB\x7f\n\x1a\n\x04read\x12\x12Grants read access\n\x1c\n\x05write\x12\x13Grants write access\nC\n\x05\x61\x64min\x12:Grants read and write access to administrative informationb\x1f\n\r\n\tBasicAuth\x12\x00\n\x0e\n\nApiKeyAuth\x12\x00\x62)\n\x17\n\x06OAuth2\x12\r\n\x04read\n\x05write\n\x0e\n\nApiKeyAuth\x12\x00rH\n\rDocumentation\x12\x37https://github.com/dxnnymurphy/alpaca-crypto-datastreamb\x06proto3')

_TASKTYPE = DESCRIPTOR.enum_types_by_name['TaskType']
TaskType = enum_type_wrapper.EnumTypeWrapper(_TASKTYPE)
_TASKSTATUSTYPE = DESCRIPTOR.enum_types_by_name['TaskStatusType']
TaskStatusType = enum_type_wrapper.EnumTypeWrapper(_TASKSTATUSTYPE)
_CURRENCY = DESCRIPTOR.enum_types_by_name['Currency']
Currency = enum_type_wrapper.EnumTypeWrapper(_CURRENCY)
_VENDOR = DESCRIPTOR.enum_types_by_name['Vendor']
Vendor = enum_type_wrapper.EnumTypeWrapper(_VENDOR)
TaskType_UNKNOWN = 0
TASK_ALPACA_CRYPTO_TRADE_SEARCH = 1
TASK_ALPACA_CRYPTO_REPLAY_TRADE_SEARCH = 2
TaskStatusType_UNKNOWN = 0
TASK_STATUS_DONE = 1
TASK_STATUS_CREATED = 2
TASK_STATUS_ERROR_INVALID_ARGUMENT = 3
TASK_STATUS_ERROR_ALREADY_EXISTS = 4
TASK_STATUS_ERROR_TRANSIENT = 5
TASK_STATUS_ERROR_UNKNOWN = 6
CURRENCY_UNKNOWN = 0
CURRENCY_ETH_USD = 1
CURRENCY_BTC_USD = 2
VENDOR_UNKNOWN = 0
VENDOR_ALPACA_CRYPTO_API = 1


_TASKS = DESCRIPTOR.message_types_by_name['Tasks']
_TASKS_METADATA = _TASKS.nested_types_by_name['Metadata']
_TASKS_SPEC = _TASKS.nested_types_by_name['Spec']
_TASK = DESCRIPTOR.message_types_by_name['Task']
_TASK_METADATA = _TASK.nested_types_by_name['Metadata']
_TASK_SPEC = _TASK.nested_types_by_name['Spec']
_TASK_STATUS = _TASK.nested_types_by_name['Status']
_TASKALPACACRYPTOTRADESEARCH = DESCRIPTOR.message_types_by_name['TaskAlpacaCryptoTradeSearch']
_TASKALPACACRYPTOREPLAYTRADESEARCH = DESCRIPTOR.message_types_by_name['TaskAlpacaCryptoReplayTradeSearch']
_VOID = DESCRIPTOR.message_types_by_name['Void']
_INT32 = DESCRIPTOR.message_types_by_name['Int32']
_STRING = DESCRIPTOR.message_types_by_name['String']
Tasks = _reflection.GeneratedProtocolMessageType('Tasks', (_message.Message,), {

  'Metadata' : _reflection.GeneratedProtocolMessageType('Metadata', (_message.Message,), {
    'DESCRIPTOR' : _TASKS_METADATA,
    '__module__' : 'service_datastream_pb2'
    # @@protoc_insertion_point(class_scope:datastream.grpc.Tasks.Metadata)
    })
  ,

  'Spec' : _reflection.GeneratedProtocolMessageType('Spec', (_message.Message,), {
    'DESCRIPTOR' : _TASKS_SPEC,
    '__module__' : 'service_datastream_pb2'
    # @@protoc_insertion_point(class_scope:datastream.grpc.Tasks.Spec)
    })
  ,
  'DESCRIPTOR' : _TASKS,
  '__module__' : 'service_datastream_pb2'
  # @@protoc_insertion_point(class_scope:datastream.grpc.Tasks)
  })
_sym_db.RegisterMessage(Tasks)
_sym_db.RegisterMessage(Tasks.Metadata)
_sym_db.RegisterMessage(Tasks.Spec)

Task = _reflection.GeneratedProtocolMessageType('Task', (_message.Message,), {

  'Metadata' : _reflection.GeneratedProtocolMessageType('Metadata', (_message.Message,), {
    'DESCRIPTOR' : _TASK_METADATA,
    '__module__' : 'service_datastream_pb2'
    # @@protoc_insertion_point(class_scope:datastream.grpc.Task.Metadata)
    })
  ,

  'Spec' : _reflection.GeneratedProtocolMessageType('Spec', (_message.Message,), {
    'DESCRIPTOR' : _TASK_SPEC,
    '__module__' : 'service_datastream_pb2'
    # @@protoc_insertion_point(class_scope:datastream.grpc.Task.Spec)
    })
  ,

  'Status' : _reflection.GeneratedProtocolMessageType('Status', (_message.Message,), {
    'DESCRIPTOR' : _TASK_STATUS,
    '__module__' : 'service_datastream_pb2'
    # @@protoc_insertion_point(class_scope:datastream.grpc.Task.Status)
    })
  ,
  'DESCRIPTOR' : _TASK,
  '__module__' : 'service_datastream_pb2'
  # @@protoc_insertion_point(class_scope:datastream.grpc.Task)
  })
_sym_db.RegisterMessage(Task)
_sym_db.RegisterMessage(Task.Metadata)
_sym_db.RegisterMessage(Task.Spec)
_sym_db.RegisterMessage(Task.Status)

TaskAlpacaCryptoTradeSearch = _reflection.GeneratedProtocolMessageType('TaskAlpacaCryptoTradeSearch', (_message.Message,), {
  'DESCRIPTOR' : _TASKALPACACRYPTOTRADESEARCH,
  '__module__' : 'service_datastream_pb2'
  # @@protoc_insertion_point(class_scope:datastream.grpc.TaskAlpacaCryptoTradeSearch)
  })
_sym_db.RegisterMessage(TaskAlpacaCryptoTradeSearch)

TaskAlpacaCryptoReplayTradeSearch = _reflection.GeneratedProtocolMessageType('TaskAlpacaCryptoReplayTradeSearch', (_message.Message,), {
  'DESCRIPTOR' : _TASKALPACACRYPTOREPLAYTRADESEARCH,
  '__module__' : 'service_datastream_pb2'
  # @@protoc_insertion_point(class_scope:datastream.grpc.TaskAlpacaCryptoReplayTradeSearch)
  })
_sym_db.RegisterMessage(TaskAlpacaCryptoReplayTradeSearch)

Void = _reflection.GeneratedProtocolMessageType('Void', (_message.Message,), {
  'DESCRIPTOR' : _VOID,
  '__module__' : 'service_datastream_pb2'
  # @@protoc_insertion_point(class_scope:datastream.grpc.Void)
  })
_sym_db.RegisterMessage(Void)

Int32 = _reflection.GeneratedProtocolMessageType('Int32', (_message.Message,), {
  'DESCRIPTOR' : _INT32,
  '__module__' : 'service_datastream_pb2'
  # @@protoc_insertion_point(class_scope:datastream.grpc.Int32)
  })
_sym_db.RegisterMessage(Int32)

String = _reflection.GeneratedProtocolMessageType('String', (_message.Message,), {
  'DESCRIPTOR' : _STRING,
  '__module__' : 'service_datastream_pb2'
  # @@protoc_insertion_point(class_scope:datastream.grpc.String)
  })
_sym_db.RegisterMessage(String)

_SERVICEDATASTREAM = DESCRIPTOR.services_by_name['ServiceDataStream']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'Z1dxnnymurphy.io/datastream/pkg/model/datastream/v3\222A\306\006\022\211\001\n\013Data Stream\"I\n\rDaniel Murphy\022\036https://dxnnymurphy.github.io/\032\030dannymurphy_7@icloud.com**\n\003MIT\022#https://opensource.org/licenses/MIT2\0030.1*\002\002\0012\020application/json:\020application/jsonZ\371\003\n\017\n\tBasicAuth\022\002\010\001\n\252\001\n\nApiKeyAuth\022\233\001\010\002\032\tX-API-Key \002J(\n\034x-amazon-apigateway-authtype\022\010\032\006oauth2J`\n\036x-amazon-apigateway-authorizer\022>*<\n\017\n\004type\022\007\032\005token\n)\n\034authorizerResultTtlInSeconds\022\t\021\000\000\000\000\000\000N@\n\270\002\n\006OAuth2\022\255\002\010\003(\0042Thttps://kcde.uat.keplercheuvreux.io/proxy/v1/security/authentication/oauth/authorize:Phttps://kcde.uat.keplercheuvreux.io/proxy/v1/security/authentication/oauth/tokenB\177\n\032\n\004read\022\022Grants read access\n\034\n\005write\022\023Grants write access\nC\n\005admin\022:Grants read and write access to administrative informationb\037\n\r\n\tBasicAuth\022\000\n\016\n\nApiKeyAuth\022\000b)\n\027\n\006OAuth2\022\r\n\004read\n\005write\n\016\n\nApiKeyAuth\022\000rH\n\rDocumentation\0227https://github.com/dxnnymurphy/alpaca-crypto-datastream'
  _SERVICEDATASTREAM.methods_by_name['CreateTask']._options = None
  _SERVICEDATASTREAM.methods_by_name['CreateTask']._serialized_options = b'\202\323\344\223\002!\"\034/proxy/datastream/api/1/task:\001*'
  _SERVICEDATASTREAM.methods_by_name['DeleteTask']._options = None
  _SERVICEDATASTREAM.methods_by_name['DeleteTask']._serialized_options = b'\202\323\344\223\002&*$/proxy/datastream/api/1/task/{value}'
  _SERVICEDATASTREAM.methods_by_name['ReadTask']._options = None
  _SERVICEDATASTREAM.methods_by_name['ReadTask']._serialized_options = b'\202\323\344\223\002&\022$/proxy/datastream/api/1/task/{value}'
  _SERVICEDATASTREAM.methods_by_name['ListTasks']._options = None
  _SERVICEDATASTREAM.methods_by_name['ListTasks']._serialized_options = b'\202\323\344\223\002\037\022\035/proxy/datastream/api/1/tasks'
  _TASKTYPE._serialized_start=1444
  _TASKTYPE._serialized_end=1557
  _TASKSTATUSTYPE._serialized_start=1560
  _TASKSTATUSTYPE._serialized_end=1793
  _CURRENCY._serialized_start=1795
  _CURRENCY._serialized_end=1871
  _VENDOR._serialized_start=1873
  _VENDOR._serialized_end=1931
  _TASKS._serialized_start=124
  _TASKS._serialized_end=320
  _TASKS_METADATA._serialized_start=227
  _TASKS_METADATA._serialized_end=249
  _TASKS_SPEC._serialized_start=251
  _TASKS_SPEC._serialized_end=320
  _TASK._serialized_start=323
  _TASK._serialized_end=1023
  _TASK_METADATA._serialized_start=470
  _TASK_METADATA._serialized_end=665
  _TASK_SPEC._serialized_start=668
  _TASK_SPEC._serialized_end=950
  _TASK_STATUS._serialized_start=952
  _TASK_STATUS._serialized_end=1023
  _TASKALPACACRYPTOTRADESEARCH._serialized_start=1026
  _TASKALPACACRYPTOTRADESEARCH._serialized_end=1211
  _TASKALPACACRYPTOREPLAYTRADESEARCH._serialized_start=1214
  _TASKALPACACRYPTOREPLAYTRADESEARCH._serialized_end=1385
  _VOID._serialized_start=1387
  _VOID._serialized_end=1393
  _INT32._serialized_start=1395
  _INT32._serialized_end=1417
  _STRING._serialized_start=1419
  _STRING._serialized_end=1442
  _SERVICEDATASTREAM._serialized_start=1934
  _SERVICEDATASTREAM._serialized_end=2367
# @@protoc_insertion_point(module_scope)
