syntax = "proto3";

package datastream.grpc;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "dxnnymurphy.io/datastream/pkg/model/datastream/v3";

// =========================================================================================================================
// OpenAPI/v2 - Swagger 
//
// For more information, please refer to:
// 1) https://blog.bullgare.com/2020/07/complete-list-of-swagger-options-to-protobuf-file/
// 2) https://github.com/grpc-ecosystem/grpc-gateway/blob/master/examples/internal/proto/examplepb/a_bit_of_everything.proto
// =========================================================================================================================

option (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Data Stream";
        version: "0.1";
        contact: {
            name: "Daniel Murphy";
            url: "https://dxnnymurphy.github.io/";
            email: "dannymurphy_7@icloud.com";
        };
        license: {
            name: "MIT";
            url: "https://opensource.org/licenses/MIT";
        };
    };

    external_docs: {
        url: "https://github.com/dxnnymurphy/alpaca-crypto-datastream";
        description: "Documentation";
    }
    
    schemes: HTTPS;
    schemes: HTTP;
    //schemes: WSS;
    
    consumes: "application/json";
    //consumes: "application/x-foo-mime";
    
    produces: "application/json";
    //produces: "application/x-foo-mime";
    
    security_definitions: {
        security: {
            key: "BasicAuth";
            value: {
            type: TYPE_BASIC;
            }
        }
        security: {
            key: "ApiKeyAuth";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "X-API-Key";
                extensions: {
                    key: "x-amazon-apigateway-authtype";
                    value {
                        string_value: "oauth2";
                    }
                }
                extensions: {
                    key: "x-amazon-apigateway-authorizer";
                    value {
                        struct_value {
                            fields {
                                key: "type";
                                value {
                                    string_value: "token";
                                }
                            }
                            fields {
                                key: "authorizerResultTtlInSeconds";
                                value {
                                    number_value: 60;
                                }
                            }
                        }
                    }
                }
            }
        }
        security: {
            key: "OAuth2";
            value: {
                type: TYPE_OAUTH2;
                flow: FLOW_ACCESS_CODE;
                authorization_url: "https://kcde.uat.keplercheuvreux.io/proxy/v1/security/authentication/oauth/authorize";
                token_url: "https://kcde.uat.keplercheuvreux.io/proxy/v1/security/authentication/oauth/token";
                scopes: {
                    scope: {
                        key: "read";
                        value: "Grants read access";
                    }
                    scope: {
                        key: "write";
                        value: "Grants write access";
                    }
                    scope: {
                        key: "admin";
                        value: "Grants read and write access to administrative information";
                    }
                }
            }
        }
    }

    security: {
        security_requirement: {
            key: "BasicAuth";
            value: {};
        }
        security_requirement: {
            key: "ApiKeyAuth";
            value: {};
        }
    }
    security: {
        security_requirement: {
            key: "OAuth2";
            value: {
                scope: "read";
                scope: "write";
            }
        }
        security_requirement: {
            key: "ApiKeyAuth";
            value: {};
        }
    }
};

// =========================================================================================================================
// OpenAPI/v2 - Swagger - END
//
// For more information, please refer to:
// 1) https://blog.bullgare.com/2020/07/complete-list-of-swagger-options-to-protobuf-file/
// 2) https://github.com/grpc-ecosystem/grpc-gateway/blob/master/examples/internal/proto/examplepb/a_bit_of_everything.proto
// =========================================================================================================================

service ServiceDataStream {
    rpc CreateTask  (Task)   returns (Task) {
        option (google.api.http) = {
            post: "/proxy/datastream/api/1/task"
            body: "*"
        };
    }
    rpc DeleteTask  (String)   returns (Task) {
        option (google.api.http) = {
            delete: "/proxy/datastream/api/1/task/{value}"
        };
    }
    rpc ReadTask  (String)   returns (Task) {
        option (google.api.http) = {
            get: "/proxy/datastream/api/1/task/{value}"
        };
    }
    rpc ListTasks (Void)   returns (Tasks) {
        option (google.api.http) = {
            get: "/proxy/datastream/api/1/tasks"
        };
    }
}

message Tasks {
    message Metadata {
        string id = 1;
    }

    message Spec {
        repeated Task items           = 1;
        int32         number_of_items = 2;
    }

    Metadata metadata = 1;
    Spec     spec     = 2;
}

message Task {
    message Metadata {
        string   id                = 1;     // If unspecified, set: /random/uuid
        TaskType type              = 2;     // Required: /what/do/you/want/me/to/do/for/you?
        string   namespace         = 3;     // If unspecified, set: datastream
        Vendor vendor              = 4;
        Currency currency          = 5;
        int32    executor_affinity = 6;
    }

    message Spec {
        optional TaskAlpacaCryptoTradeSearch      task_alpaca_crypto_trade_search       = 1;
        optional TaskAlpacaCryptoReplayTradeSearch task_alpaca_crypto_replay_trade_search = 2;
    }

    message Status {
        TaskStatusType type   = 1;
        string         reason = 2; 
    }

    Metadata metadata = 1;
    Spec     spec     = 2;          // Required: /select/one/of/the/tasks
    Status   status   = 3;
}

enum TaskType {
    TaskType_UNKNOWN = 0;
    TASK_ALPACA_CRYPTO_TRADE_SEARCH        = 1;
    TASK_ALPACA_CRYPTO_REPLAY_TRADE_SEARCH = 2;
}

enum TaskStatusType {
    TaskStatusType_UNKNOWN             = 0;
    TASK_STATUS_DONE                   = 1;
    TASK_STATUS_CREATED                = 2;
    TASK_STATUS_ERROR_INVALID_ARGUMENT = 3;
    TASK_STATUS_ERROR_ALREADY_EXISTS   = 4;
    TASK_STATUS_ERROR_TRANSIENT        = 5;
    TASK_STATUS_ERROR_UNKNOWN          = 6;
}

enum Currency {
    CURRENCY_UNKNOWN = 0;
    CURRENCY_ETH_USD    = 1;
    CURRENCY_BTC_USD =  2;
}

enum Vendor {
    VENDOR_UNKNOWN = 0;
    VENDOR_ALPACA_CRYPTO_API   = 1;
}

message TaskAlpacaCryptoTradeSearch {
    optional string currency = 1;

    optional string startTime                         = 2;      
    optional string endTime                           = 3;  
    optional int32 searchDuration                     = 4;
}

message TaskAlpacaCryptoReplayTradeSearch {
    string Vendor = 1;
    
    optional string startTime                         = 2;      
    optional string endTime                           = 3;      
    optional string searchDuration                    = 4;
}

message Void   {}
message Int32  { int32  value = 1; }
message String { string value = 1; }
