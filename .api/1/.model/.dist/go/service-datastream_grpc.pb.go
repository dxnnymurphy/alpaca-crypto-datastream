// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: service-datastream.proto

package v3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceDataStreamClient is the client API for ServiceDataStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceDataStreamClient interface {
	CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	DeleteTask(ctx context.Context, in *String, opts ...grpc.CallOption) (*Task, error)
	ReadTask(ctx context.Context, in *String, opts ...grpc.CallOption) (*Task, error)
	ListTasks(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Tasks, error)
}

type serviceDataStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceDataStreamClient(cc grpc.ClientConnInterface) ServiceDataStreamClient {
	return &serviceDataStreamClient{cc}
}

func (c *serviceDataStreamClient) CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/datastream.grpc.ServiceDataStream/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDataStreamClient) DeleteTask(ctx context.Context, in *String, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/datastream.grpc.ServiceDataStream/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDataStreamClient) ReadTask(ctx context.Context, in *String, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/datastream.grpc.ServiceDataStream/ReadTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDataStreamClient) ListTasks(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Tasks, error) {
	out := new(Tasks)
	err := c.cc.Invoke(ctx, "/datastream.grpc.ServiceDataStream/ListTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceDataStreamServer is the server API for ServiceDataStream service.
// All implementations must embed UnimplementedServiceDataStreamServer
// for forward compatibility
type ServiceDataStreamServer interface {
	CreateTask(context.Context, *Task) (*Task, error)
	DeleteTask(context.Context, *String) (*Task, error)
	ReadTask(context.Context, *String) (*Task, error)
	ListTasks(context.Context, *Void) (*Tasks, error)
	mustEmbedUnimplementedServiceDataStreamServer()
}

// UnimplementedServiceDataStreamServer must be embedded to have forward compatible implementations.
type UnimplementedServiceDataStreamServer struct {
}

func (UnimplementedServiceDataStreamServer) CreateTask(context.Context, *Task) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedServiceDataStreamServer) DeleteTask(context.Context, *String) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedServiceDataStreamServer) ReadTask(context.Context, *String) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTask not implemented")
}
func (UnimplementedServiceDataStreamServer) ListTasks(context.Context, *Void) (*Tasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedServiceDataStreamServer) mustEmbedUnimplementedServiceDataStreamServer() {}

// UnsafeServiceDataStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceDataStreamServer will
// result in compilation errors.
type UnsafeServiceDataStreamServer interface {
	mustEmbedUnimplementedServiceDataStreamServer()
}

func RegisterServiceDataStreamServer(s grpc.ServiceRegistrar, srv ServiceDataStreamServer) {
	s.RegisterService(&ServiceDataStream_ServiceDesc, srv)
}

func _ServiceDataStream_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDataStreamServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastream.grpc.ServiceDataStream/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDataStreamServer).CreateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDataStream_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDataStreamServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastream.grpc.ServiceDataStream/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDataStreamServer).DeleteTask(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDataStream_ReadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDataStreamServer).ReadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastream.grpc.ServiceDataStream/ReadTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDataStreamServer).ReadTask(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDataStream_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDataStreamServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastream.grpc.ServiceDataStream/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDataStreamServer).ListTasks(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceDataStream_ServiceDesc is the grpc.ServiceDesc for ServiceDataStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceDataStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datastream.grpc.ServiceDataStream",
	HandlerType: (*ServiceDataStreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _ServiceDataStream_CreateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _ServiceDataStream_DeleteTask_Handler,
		},
		{
			MethodName: "ReadTask",
			Handler:    _ServiceDataStream_ReadTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _ServiceDataStream_ListTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service-datastream.proto",
}
