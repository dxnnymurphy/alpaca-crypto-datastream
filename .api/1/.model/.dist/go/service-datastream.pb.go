// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: service-datastream.proto

package v3

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskType int32

const (
	TaskType_TaskType_UNKNOWN                       TaskType = 0
	TaskType_TASK_ALPACA_CRYPTO_TRADE_SEARCH        TaskType = 1
	TaskType_TASK_ALPACA_CRYPTO_REPLAY_TRADE_SEARCH TaskType = 2
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0: "TaskType_UNKNOWN",
		1: "TASK_ALPACA_CRYPTO_TRADE_SEARCH",
		2: "TASK_ALPACA_CRYPTO_REPLAY_TRADE_SEARCH",
	}
	TaskType_value = map[string]int32{
		"TaskType_UNKNOWN":                       0,
		"TASK_ALPACA_CRYPTO_TRADE_SEARCH":        1,
		"TASK_ALPACA_CRYPTO_REPLAY_TRADE_SEARCH": 2,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_datastream_proto_enumTypes[0].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_service_datastream_proto_enumTypes[0]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_service_datastream_proto_rawDescGZIP(), []int{0}
}

type TaskStatusType int32

const (
	TaskStatusType_TaskStatusType_UNKNOWN             TaskStatusType = 0
	TaskStatusType_TASK_STATUS_DONE                   TaskStatusType = 1
	TaskStatusType_TASK_STATUS_CREATED                TaskStatusType = 2
	TaskStatusType_TASK_STATUS_ERROR_INVALID_ARGUMENT TaskStatusType = 3
	TaskStatusType_TASK_STATUS_ERROR_ALREADY_EXISTS   TaskStatusType = 4
	TaskStatusType_TASK_STATUS_ERROR_TRANSIENT        TaskStatusType = 5
	TaskStatusType_TASK_STATUS_ERROR_UNKNOWN          TaskStatusType = 6
)

// Enum value maps for TaskStatusType.
var (
	TaskStatusType_name = map[int32]string{
		0: "TaskStatusType_UNKNOWN",
		1: "TASK_STATUS_DONE",
		2: "TASK_STATUS_CREATED",
		3: "TASK_STATUS_ERROR_INVALID_ARGUMENT",
		4: "TASK_STATUS_ERROR_ALREADY_EXISTS",
		5: "TASK_STATUS_ERROR_TRANSIENT",
		6: "TASK_STATUS_ERROR_UNKNOWN",
	}
	TaskStatusType_value = map[string]int32{
		"TaskStatusType_UNKNOWN":             0,
		"TASK_STATUS_DONE":                   1,
		"TASK_STATUS_CREATED":                2,
		"TASK_STATUS_ERROR_INVALID_ARGUMENT": 3,
		"TASK_STATUS_ERROR_ALREADY_EXISTS":   4,
		"TASK_STATUS_ERROR_TRANSIENT":        5,
		"TASK_STATUS_ERROR_UNKNOWN":          6,
	}
)

func (x TaskStatusType) Enum() *TaskStatusType {
	p := new(TaskStatusType)
	*p = x
	return p
}

func (x TaskStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_datastream_proto_enumTypes[1].Descriptor()
}

func (TaskStatusType) Type() protoreflect.EnumType {
	return &file_service_datastream_proto_enumTypes[1]
}

func (x TaskStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatusType.Descriptor instead.
func (TaskStatusType) EnumDescriptor() ([]byte, []int) {
	return file_service_datastream_proto_rawDescGZIP(), []int{1}
}

type Currency int32

const (
	Currency_CURRENCY_UNKNOWN Currency = 0
	Currency_CURRENCY_ETH_USD Currency = 1
	Currency_CURRENCY_BTC_USD Currency = 2
)

// Enum value maps for Currency.
var (
	Currency_name = map[int32]string{
		0: "CURRENCY_UNKNOWN",
		1: "CURRENCY_ETH_USD",
		2: "CURRENCY_BTC_USD",
	}
	Currency_value = map[string]int32{
		"CURRENCY_UNKNOWN": 0,
		"CURRENCY_ETH_USD": 1,
		"CURRENCY_BTC_USD": 2,
	}
)

func (x Currency) Enum() *Currency {
	p := new(Currency)
	*p = x
	return p
}

func (x Currency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Currency) Descriptor() protoreflect.EnumDescriptor {
	return file_service_datastream_proto_enumTypes[2].Descriptor()
}

func (Currency) Type() protoreflect.EnumType {
	return &file_service_datastream_proto_enumTypes[2]
}

func (x Currency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Currency.Descriptor instead.
func (Currency) EnumDescriptor() ([]byte, []int) {
	return file_service_datastream_proto_rawDescGZIP(), []int{2}
}

type Vendor int32

const (
	Vendor_VENDOR_UNKNOWN           Vendor = 0
	Vendor_VENDOR_ALPACA_CRYPTO_API Vendor = 1
)

// Enum value maps for Vendor.
var (
	Vendor_name = map[int32]string{
		0: "VENDOR_UNKNOWN",
		1: "VENDOR_ALPACA_CRYPTO_API",
	}
	Vendor_value = map[string]int32{
		"VENDOR_UNKNOWN":           0,
		"VENDOR_ALPACA_CRYPTO_API": 1,
	}
)

func (x Vendor) Enum() *Vendor {
	p := new(Vendor)
	*p = x
	return p
}

func (x Vendor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Vendor) Descriptor() protoreflect.EnumDescriptor {
	return file_service_datastream_proto_enumTypes[3].Descriptor()
}

func (Vendor) Type() protoreflect.EnumType {
	return &file_service_datastream_proto_enumTypes[3]
}

func (x Vendor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Vendor.Descriptor instead.
func (Vendor) EnumDescriptor() ([]byte, []int) {
	return file_service_datastream_proto_rawDescGZIP(), []int{3}
}

type Tasks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *Tasks_Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *Tasks_Spec     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *Tasks) Reset() {
	*x = Tasks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_datastream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tasks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tasks) ProtoMessage() {}

func (x *Tasks) ProtoReflect() protoreflect.Message {
	mi := &file_service_datastream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tasks.ProtoReflect.Descriptor instead.
func (*Tasks) Descriptor() ([]byte, []int) {
	return file_service_datastream_proto_rawDescGZIP(), []int{0}
}

func (x *Tasks) GetMetadata() *Tasks_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Tasks) GetSpec() *Tasks_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *Task_Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *Task_Spec     `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"` // Required: /select/one/of/the/tasks
	Status   *Task_Status   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_datastream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_service_datastream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_service_datastream_proto_rawDescGZIP(), []int{1}
}

func (x *Task) GetMetadata() *Task_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Task) GetSpec() *Task_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Task) GetStatus() *Task_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type TaskAlpacaCryptoTradeSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency       *string `protobuf:"bytes,1,opt,name=currency,proto3,oneof" json:"currency,omitempty"`
	StartTime      *string `protobuf:"bytes,2,opt,name=startTime,proto3,oneof" json:"startTime,omitempty"`
	EndTime        *string `protobuf:"bytes,3,opt,name=endTime,proto3,oneof" json:"endTime,omitempty"`
	SearchDuration *int32  `protobuf:"varint,4,opt,name=searchDuration,proto3,oneof" json:"searchDuration,omitempty"`
}

func (x *TaskAlpacaCryptoTradeSearch) Reset() {
	*x = TaskAlpacaCryptoTradeSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_datastream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAlpacaCryptoTradeSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAlpacaCryptoTradeSearch) ProtoMessage() {}

func (x *TaskAlpacaCryptoTradeSearch) ProtoReflect() protoreflect.Message {
	mi := &file_service_datastream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAlpacaCryptoTradeSearch.ProtoReflect.Descriptor instead.
func (*TaskAlpacaCryptoTradeSearch) Descriptor() ([]byte, []int) {
	return file_service_datastream_proto_rawDescGZIP(), []int{2}
}

func (x *TaskAlpacaCryptoTradeSearch) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *TaskAlpacaCryptoTradeSearch) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *TaskAlpacaCryptoTradeSearch) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *TaskAlpacaCryptoTradeSearch) GetSearchDuration() int32 {
	if x != nil && x.SearchDuration != nil {
		return *x.SearchDuration
	}
	return 0
}

type TaskAlpacaCryptoReplayTradeSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vendor         string  `protobuf:"bytes,1,opt,name=Vendor,proto3" json:"Vendor,omitempty"`
	StartTime      *string `protobuf:"bytes,2,opt,name=startTime,proto3,oneof" json:"startTime,omitempty"`
	EndTime        *string `protobuf:"bytes,3,opt,name=endTime,proto3,oneof" json:"endTime,omitempty"`
	SearchDuration *string `protobuf:"bytes,4,opt,name=searchDuration,proto3,oneof" json:"searchDuration,omitempty"`
}

func (x *TaskAlpacaCryptoReplayTradeSearch) Reset() {
	*x = TaskAlpacaCryptoReplayTradeSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_datastream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskAlpacaCryptoReplayTradeSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskAlpacaCryptoReplayTradeSearch) ProtoMessage() {}

func (x *TaskAlpacaCryptoReplayTradeSearch) ProtoReflect() protoreflect.Message {
	mi := &file_service_datastream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskAlpacaCryptoReplayTradeSearch.ProtoReflect.Descriptor instead.
func (*TaskAlpacaCryptoReplayTradeSearch) Descriptor() ([]byte, []int) {
	return file_service_datastream_proto_rawDescGZIP(), []int{3}
}

func (x *TaskAlpacaCryptoReplayTradeSearch) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *TaskAlpacaCryptoReplayTradeSearch) GetStartTime() string {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return ""
}

func (x *TaskAlpacaCryptoReplayTradeSearch) GetEndTime() string {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return ""
}

func (x *TaskAlpacaCryptoReplayTradeSearch) GetSearchDuration() string {
	if x != nil && x.SearchDuration != nil {
		return *x.SearchDuration
	}
	return ""
}

type Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Void) Reset() {
	*x = Void{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_datastream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Void) ProtoMessage() {}

func (x *Void) ProtoReflect() protoreflect.Message {
	mi := &file_service_datastream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Void.ProtoReflect.Descriptor instead.
func (*Void) Descriptor() ([]byte, []int) {
	return file_service_datastream_proto_rawDescGZIP(), []int{4}
}

type Int32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Int32) Reset() {
	*x = Int32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_datastream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32) ProtoMessage() {}

func (x *Int32) ProtoReflect() protoreflect.Message {
	mi := &file_service_datastream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32.ProtoReflect.Descriptor instead.
func (*Int32) Descriptor() ([]byte, []int) {
	return file_service_datastream_proto_rawDescGZIP(), []int{5}
}

func (x *Int32) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *String) Reset() {
	*x = String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_datastream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_service_datastream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_service_datastream_proto_rawDescGZIP(), []int{6}
}

func (x *String) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Tasks_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Tasks_Metadata) Reset() {
	*x = Tasks_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_datastream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tasks_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tasks_Metadata) ProtoMessage() {}

func (x *Tasks_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_service_datastream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tasks_Metadata.ProtoReflect.Descriptor instead.
func (*Tasks_Metadata) Descriptor() ([]byte, []int) {
	return file_service_datastream_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Tasks_Metadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Tasks_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items         []*Task `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	NumberOfItems int32   `protobuf:"varint,2,opt,name=number_of_items,json=numberOfItems,proto3" json:"number_of_items,omitempty"`
}

func (x *Tasks_Spec) Reset() {
	*x = Tasks_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_datastream_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tasks_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tasks_Spec) ProtoMessage() {}

func (x *Tasks_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_service_datastream_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tasks_Spec.ProtoReflect.Descriptor instead.
func (*Tasks_Spec) Descriptor() ([]byte, []int) {
	return file_service_datastream_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Tasks_Spec) GetItems() []*Task {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Tasks_Spec) GetNumberOfItems() int32 {
	if x != nil {
		return x.NumberOfItems
	}
	return 0
}

type Task_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                    // If unspecified, set: /random/uuid
	Type             TaskType `protobuf:"varint,2,opt,name=type,proto3,enum=datastream.grpc.TaskType" json:"type,omitempty"` // Required: /what/do/you/want/me/to/do/for/you?
	Namespace        string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`                      // If unspecified, set: datastream
	Vendor           Vendor   `protobuf:"varint,4,opt,name=vendor,proto3,enum=datastream.grpc.Vendor" json:"vendor,omitempty"`
	Currency         Currency `protobuf:"varint,5,opt,name=currency,proto3,enum=datastream.grpc.Currency" json:"currency,omitempty"`
	ExecutorAffinity int32    `protobuf:"varint,6,opt,name=executor_affinity,json=executorAffinity,proto3" json:"executor_affinity,omitempty"`
}

func (x *Task_Metadata) Reset() {
	*x = Task_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_datastream_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Metadata) ProtoMessage() {}

func (x *Task_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_service_datastream_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Metadata.ProtoReflect.Descriptor instead.
func (*Task_Metadata) Descriptor() ([]byte, []int) {
	return file_service_datastream_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Task_Metadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Task_Metadata) GetType() TaskType {
	if x != nil {
		return x.Type
	}
	return TaskType_TaskType_UNKNOWN
}

func (x *Task_Metadata) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Task_Metadata) GetVendor() Vendor {
	if x != nil {
		return x.Vendor
	}
	return Vendor_VENDOR_UNKNOWN
}

func (x *Task_Metadata) GetCurrency() Currency {
	if x != nil {
		return x.Currency
	}
	return Currency_CURRENCY_UNKNOWN
}

func (x *Task_Metadata) GetExecutorAffinity() int32 {
	if x != nil {
		return x.ExecutorAffinity
	}
	return 0
}

type Task_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskAlpacaCryptoTradeSearch       *TaskAlpacaCryptoTradeSearch       `protobuf:"bytes,1,opt,name=task_alpaca_crypto_trade_search,json=taskAlpacaCryptoTradeSearch,proto3,oneof" json:"task_alpaca_crypto_trade_search,omitempty"`
	TaskAlpacaCryptoReplayTradeSearch *TaskAlpacaCryptoReplayTradeSearch `protobuf:"bytes,2,opt,name=task_alpaca_crypto_replay_trade_search,json=taskAlpacaCryptoReplayTradeSearch,proto3,oneof" json:"task_alpaca_crypto_replay_trade_search,omitempty"`
}

func (x *Task_Spec) Reset() {
	*x = Task_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_datastream_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Spec) ProtoMessage() {}

func (x *Task_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_service_datastream_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Spec.ProtoReflect.Descriptor instead.
func (*Task_Spec) Descriptor() ([]byte, []int) {
	return file_service_datastream_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Task_Spec) GetTaskAlpacaCryptoTradeSearch() *TaskAlpacaCryptoTradeSearch {
	if x != nil {
		return x.TaskAlpacaCryptoTradeSearch
	}
	return nil
}

func (x *Task_Spec) GetTaskAlpacaCryptoReplayTradeSearch() *TaskAlpacaCryptoReplayTradeSearch {
	if x != nil {
		return x.TaskAlpacaCryptoReplayTradeSearch
	}
	return nil
}

type Task_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   TaskStatusType `protobuf:"varint,1,opt,name=type,proto3,enum=datastream.grpc.TaskStatusType" json:"type,omitempty"`
	Reason string         `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *Task_Status) Reset() {
	*x = Task_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_datastream_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_Status) ProtoMessage() {}

func (x *Task_Status) ProtoReflect() protoreflect.Message {
	mi := &file_service_datastream_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_Status.ProtoReflect.Descriptor instead.
func (*Task_Status) Descriptor() ([]byte, []int) {
	return file_service_datastream_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Task_Status) GetType() TaskStatusType {
	if x != nil {
		return x.Type
	}
	return TaskStatusType_TaskStatusType_UNKNOWN
}

func (x *Task_Status) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_service_datastream_proto protoreflect.FileDescriptor

var file_service_datastream_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xee, 0x01, 0x0a, 0x05, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x2f, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x1a, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x5b, 0x0a,
	0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xdc, 0x06, 0x0a, 0x04, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x2e, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12,
	0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xfc, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x12, 0x35, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x6f, 0x72, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x41, 0x66, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x79, 0x1a, 0xdb, 0x02, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x77, 0x0a,
	0x1f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x6c, 0x70, 0x61, 0x63, 0x61, 0x5f, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x6c, 0x70,
	0x61, 0x63, 0x61, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x48, 0x00, 0x52, 0x1b, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x6c, 0x70, 0x61,
	0x63, 0x61, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x8a, 0x01, 0x0a, 0x26, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x61, 0x6c, 0x70, 0x61, 0x63, 0x61, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x6c,
	0x70, 0x61, 0x63, 0x61, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x48, 0x01, 0x52, 0x21, 0x74,
	0x61, 0x73, 0x6b, 0x41, 0x6c, 0x70, 0x61, 0x63, 0x61, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x88, 0x01, 0x01, 0x42, 0x22, 0x0a, 0x20, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x6c, 0x70,
	0x61, 0x63, 0x61, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x29, 0x0a, 0x27, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x61, 0x6c, 0x70, 0x61, 0x63, 0x61, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x1a, 0x55, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xe7, 0x01, 0x0a, 0x1b, 0x54, 0x61,
	0x73, 0x6b, 0x41, 0x6c, 0x70, 0x61, 0x63, 0x61, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xd7, 0x01, 0x0a, 0x21, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x6c, 0x70, 0x61,
	0x63, 0x61, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x06, 0x0a,
	0x04, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x1d, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x1e, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2a, 0x71, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x41,
	0x4c, 0x50, 0x41, 0x43, 0x41, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x41, 0x4c, 0x50, 0x41, 0x43, 0x41, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x4f, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53,
	0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x02, 0x2a, 0xe9, 0x01, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x24, 0x0a,
	0x20, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x45,
	0x4e, 0x54, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x06, 0x2a, 0x4c, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43,
	0x59, 0x5f, 0x45, 0x54, 0x48, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x54, 0x43, 0x5f, 0x55, 0x53, 0x44, 0x10,
	0x02, 0x2a, 0x3a, 0x0a, 0x06, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x56,
	0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x50, 0x41, 0x43, 0x41,
	0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x41, 0x50, 0x49, 0x10, 0x01, 0x32, 0xb1, 0x03,
	0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x63, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x22,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x31,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a,
	0x15, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x2a, 0x24,
	0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x7b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x7d, 0x12, 0x68, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x17, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x15, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x7b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x7d, 0x12, 0x61,
	0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x15, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x1a, 0x16, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x42, 0xfd, 0x06, 0x5a, 0x31, 0x64, 0x78, 0x6e, 0x6e, 0x79, 0x6d, 0x75, 0x72, 0x70, 0x68,
	0x79, 0x2e, 0x69, 0x6f, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2f, 0x76, 0x33, 0x92, 0x41, 0xc6, 0x06, 0x12, 0x89, 0x01, 0x0a, 0x0b,
	0x44, 0x61, 0x74, 0x61, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x49, 0x0a, 0x0d, 0x44,
	0x61, 0x6e, 0x69, 0x65, 0x6c, 0x20, 0x4d, 0x75, 0x72, 0x70, 0x68, 0x79, 0x12, 0x1e, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64, 0x78, 0x6e, 0x6e, 0x79, 0x6d, 0x75, 0x72, 0x70, 0x68,
	0x79, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x69, 0x6f, 0x2f, 0x1a, 0x18, 0x64, 0x61,
	0x6e, 0x6e, 0x79, 0x6d, 0x75, 0x72, 0x70, 0x68, 0x79, 0x5f, 0x37, 0x40, 0x69, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x2a, 0x0a, 0x03, 0x4d, 0x49, 0x54, 0x12, 0x23, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x2f, 0x4d,
	0x49, 0x54, 0x32, 0x03, 0x30, 0x2e, 0x31, 0x2a, 0x02, 0x02, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a,
	0xf9, 0x03, 0x0a, 0x0f, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x02, 0x08, 0x01, 0x0a, 0xaa, 0x01, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x9b, 0x01, 0x08, 0x02, 0x1a, 0x09, 0x58, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x4b,
	0x65, 0x79, 0x20, 0x02, 0x4a, 0x28, 0x0a, 0x1c, 0x78, 0x2d, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e,
	0x2d, 0x61, 0x70, 0x69, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2d, 0x61, 0x75, 0x74, 0x68,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x08, 0x1a, 0x06, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x4a, 0x60,
	0x0a, 0x1e, 0x78, 0x2d, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x2d, 0x61, 0x70, 0x69, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x72,
	0x12, 0x3e, 0x2a, 0x3c, 0x0a, 0x0f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x07, 0x1a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x0a, 0x29, 0x0a, 0x1c, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x74, 0x6c, 0x49, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x40,
	0x0a, 0xb8, 0x02, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0xad, 0x02, 0x08, 0x03,
	0x28, 0x04, 0x32, 0x54, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6b, 0x63, 0x64, 0x65,
	0x2e, 0x75, 0x61, 0x74, 0x2e, 0x6b, 0x65, 0x70, 0x6c, 0x65, 0x72, 0x63, 0x68, 0x65, 0x75, 0x76,
	0x72, 0x65, 0x75, 0x78, 0x2e, 0x69, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x3a, 0x50, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x6b, 0x63, 0x64, 0x65, 0x2e, 0x75, 0x61, 0x74, 0x2e, 0x6b, 0x65, 0x70, 0x6c, 0x65,
	0x72, 0x63, 0x68, 0x65, 0x75, 0x76, 0x72, 0x65, 0x75, 0x78, 0x2e, 0x69, 0x6f, 0x2f, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f,
	0x61, 0x75, 0x74, 0x68, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x7f, 0x0a, 0x1a, 0x0a, 0x04,
	0x72, 0x65, 0x61, 0x64, 0x12, 0x12, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x72, 0x65, 0x61,
	0x64, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x0a, 0x1c, 0x0a, 0x05, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x12, 0x13, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x20,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x0a, 0x43, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12,
	0x3a, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x1f, 0x0a, 0x0d, 0x0a,
	0x09, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x0a, 0x0e, 0x0a, 0x0a,
	0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x62, 0x29, 0x0a, 0x17,
	0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x12, 0x0d, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64,
	0x0a, 0x05, 0x77, 0x72, 0x69, 0x74, 0x65, 0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x00, 0x72, 0x48, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x78, 0x6e,
	0x6e, 0x79, 0x6d, 0x75, 0x72, 0x70, 0x68, 0x79, 0x2f, 0x61, 0x6c, 0x70, 0x61, 0x63, 0x61, 0x2d,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_datastream_proto_rawDescOnce sync.Once
	file_service_datastream_proto_rawDescData = file_service_datastream_proto_rawDesc
)

func file_service_datastream_proto_rawDescGZIP() []byte {
	file_service_datastream_proto_rawDescOnce.Do(func() {
		file_service_datastream_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_datastream_proto_rawDescData)
	})
	return file_service_datastream_proto_rawDescData
}

var file_service_datastream_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_service_datastream_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_service_datastream_proto_goTypes = []interface{}{
	(TaskType)(0),                       // 0: datastream.grpc.TaskType
	(TaskStatusType)(0),                 // 1: datastream.grpc.TaskStatusType
	(Currency)(0),                       // 2: datastream.grpc.Currency
	(Vendor)(0),                         // 3: datastream.grpc.Vendor
	(*Tasks)(nil),                       // 4: datastream.grpc.Tasks
	(*Task)(nil),                        // 5: datastream.grpc.Task
	(*TaskAlpacaCryptoTradeSearch)(nil), // 6: datastream.grpc.TaskAlpacaCryptoTradeSearch
	(*TaskAlpacaCryptoReplayTradeSearch)(nil), // 7: datastream.grpc.TaskAlpacaCryptoReplayTradeSearch
	(*Void)(nil),           // 8: datastream.grpc.Void
	(*Int32)(nil),          // 9: datastream.grpc.Int32
	(*String)(nil),         // 10: datastream.grpc.String
	(*Tasks_Metadata)(nil), // 11: datastream.grpc.Tasks.Metadata
	(*Tasks_Spec)(nil),     // 12: datastream.grpc.Tasks.Spec
	(*Task_Metadata)(nil),  // 13: datastream.grpc.Task.Metadata
	(*Task_Spec)(nil),      // 14: datastream.grpc.Task.Spec
	(*Task_Status)(nil),    // 15: datastream.grpc.Task.Status
}
var file_service_datastream_proto_depIdxs = []int32{
	11, // 0: datastream.grpc.Tasks.metadata:type_name -> datastream.grpc.Tasks.Metadata
	12, // 1: datastream.grpc.Tasks.spec:type_name -> datastream.grpc.Tasks.Spec
	13, // 2: datastream.grpc.Task.metadata:type_name -> datastream.grpc.Task.Metadata
	14, // 3: datastream.grpc.Task.spec:type_name -> datastream.grpc.Task.Spec
	15, // 4: datastream.grpc.Task.status:type_name -> datastream.grpc.Task.Status
	5,  // 5: datastream.grpc.Tasks.Spec.items:type_name -> datastream.grpc.Task
	0,  // 6: datastream.grpc.Task.Metadata.type:type_name -> datastream.grpc.TaskType
	3,  // 7: datastream.grpc.Task.Metadata.vendor:type_name -> datastream.grpc.Vendor
	2,  // 8: datastream.grpc.Task.Metadata.currency:type_name -> datastream.grpc.Currency
	6,  // 9: datastream.grpc.Task.Spec.task_alpaca_crypto_trade_search:type_name -> datastream.grpc.TaskAlpacaCryptoTradeSearch
	7,  // 10: datastream.grpc.Task.Spec.task_alpaca_crypto_replay_trade_search:type_name -> datastream.grpc.TaskAlpacaCryptoReplayTradeSearch
	1,  // 11: datastream.grpc.Task.Status.type:type_name -> datastream.grpc.TaskStatusType
	5,  // 12: datastream.grpc.ServiceDataStream.CreateTask:input_type -> datastream.grpc.Task
	10, // 13: datastream.grpc.ServiceDataStream.DeleteTask:input_type -> datastream.grpc.String
	10, // 14: datastream.grpc.ServiceDataStream.ReadTask:input_type -> datastream.grpc.String
	8,  // 15: datastream.grpc.ServiceDataStream.ListTasks:input_type -> datastream.grpc.Void
	5,  // 16: datastream.grpc.ServiceDataStream.CreateTask:output_type -> datastream.grpc.Task
	5,  // 17: datastream.grpc.ServiceDataStream.DeleteTask:output_type -> datastream.grpc.Task
	5,  // 18: datastream.grpc.ServiceDataStream.ReadTask:output_type -> datastream.grpc.Task
	4,  // 19: datastream.grpc.ServiceDataStream.ListTasks:output_type -> datastream.grpc.Tasks
	16, // [16:20] is the sub-list for method output_type
	12, // [12:16] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_service_datastream_proto_init() }
func file_service_datastream_proto_init() {
	if File_service_datastream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_datastream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tasks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_datastream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_datastream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAlpacaCryptoTradeSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_datastream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskAlpacaCryptoReplayTradeSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_datastream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Void); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_datastream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_datastream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_datastream_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tasks_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_datastream_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tasks_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_datastream_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_datastream_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_datastream_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_service_datastream_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_service_datastream_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_service_datastream_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_datastream_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_datastream_proto_goTypes,
		DependencyIndexes: file_service_datastream_proto_depIdxs,
		EnumInfos:         file_service_datastream_proto_enumTypes,
		MessageInfos:      file_service_datastream_proto_msgTypes,
	}.Build()
	File_service_datastream_proto = out.File
	file_service_datastream_proto_rawDesc = nil
	file_service_datastream_proto_goTypes = nil
	file_service_datastream_proto_depIdxs = nil
}
